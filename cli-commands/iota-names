# devnet
# iota_names object https://explorer.rebased.iota.org/object/0xbf3563622035af599057c46f4b871e0a9817c7bab759354532402be6d9538ba3?network=devnet
IOTA_NAMES_PACKAGE_ID=0xa1d2ed2008d31d358cfaf61a89aa7cfaa78ed183dbe683620258e98c59f48b13
IOTA_NAMES_OBJECT_ID=0xbf3563622035af599057c46f4b871e0a9817c7bab759354532402be6d9538ba3
PAYMENTS_PACKAGE_ID=0xb06b8075797480a9bb660c927b666ca0301cdffa622e7c6b9c583bd2b45c781a
ADMIN_CAP=0x3014281d985cf1e2f640884d905c6c81aeb5951d14482e701428d4e611404a68


DOMAIN_NAME=name.iota
first_part="${DOMAIN_NAME%%.*}"      # Extract the part before the dot (name)
LENGTH=${#first_part}
DOMAIN_NAME_STRING="\"$DOMAIN_NAME\""

# compute price
LENGTH=${#first_part}
inspect_output=$(iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::iota_names::get_config "<$IOTA_NAMES_PACKAGE_ID::pricing_config::PricingConfig>" @$IOTA_NAMES_OBJECT_ID \
--assign config \
--move-call $IOTA_NAMES_PACKAGE_ID::pricing_config::calculate_base_price config $LENGTH \
--dev-inspect)
# echo $inspect_output
bytes=($(echo "$inspect_output" | grep -o 'Bytes: \[.*\]' | tail -n 1 | sed -E 's/[^0-9,]//g' | tr ',' '\n'))
HEX_VALUES=$(echo $bytes | tr ' ' '\n' | xargs -I {} printf "\\\\x%02x" {})
PRICE=$(echo -n -e $HEX_VALUES | od -An -t u8 | tr -d ' ')
echo $PRICE

TARGET_ADDRESS=$(iota client active-address)
iota client ptb \
--split-coins gas "[$PRICE]" \
--assign coins \
--move-call $IOTA_NAMES_PACKAGE_ID::payment::init_registration @$IOTA_NAMES_OBJECT_ID $DOMAIN_NAME_STRING \
--assign payment_intent \
--move-call $PAYMENTS_PACKAGE_ID::payments::handle_base_payment "<0x0000000000000000000000000000000000000000000000000000000000000002::iota::IOTA>" @$IOTA_NAMES_OBJECT_ID payment_intent coins.0 \
--assign receipt \
--move-call $IOTA_NAMES_PACKAGE_ID::payment::register receipt @$IOTA_NAMES_OBJECT_ID @0x6 \
--assign res \
--move-call $IOTA_NAMES_PACKAGE_ID::controller::set_target_address @$IOTA_NAMES_OBJECT_ID res "some(@$TARGET_ADDRESS)" @0x6 \
--transfer-objects "[res]" @$TARGET_ADDRESS \
--dry-run

# convert the result bytes in JS
const bytes = new Uint8Array([0, 148, 53, 119, 0, 0, 0, 0]);
const buffer = bytes.buffer;
const view = new DataView(buffer);
const u64Number = view.getBigUint64(0, true); // 'true' for little-endian, 'false' for big-endian
console.log(u64Number.toString()); 

# set set_reverse_lookup
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::controller::set_reverse_lookup @$IOTA_NAMES_OBJECT_ID $DOMAIN_NAME \
--dry-run

# set set_data 
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::controller::set_user_data @0x093738ab2ff173e45e93a59bf7cc1adbf6e16e17f414446459a42940cc5dcf86 @0x1a593c66b93e01fa74e88d53e4d0fea49e0c27f5b948ba71f17782b304129ec0 '"my_key"' '"my_value"' @0x6 \
--dry-run

# authorize admin 
IOTA_NAMES_PACKAGE_ID=0xa1d2ed2008d31d358cfaf61a89aa7cfaa78ed183dbe683620258e98c59f48b13
IOTA_NAMES_OBJECT_ID=0xbf3563622035af599057c46f4b871e0a9817c7bab759354532402be6d9538ba3
ADMIN_CAP=0xc67f174b790cbec683538b0a8ebee44a1ae6e4fec4ab8d34a59d896d843bb119
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::admin::authorize @$ADMIN_CAP @$IOTA_NAMES_OBJECT_ID \
--dry-run
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::iota_names::authorize_app "<$IOTA_NAMES_PACKAGE_ID::admin::Admin>" @$ADMIN_CAP @$IOTA_NAMES_OBJECT_ID \
--dry-run

# resolve address
DOMAIN_NAME='"name.iota"'
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::iota_names::registry "<$IOTA_NAMES_PACKAGE_ID::registry::Registry>" @$IOTA_NAMES_OBJECT_ID \
--assign iota_names \
--move-call $IOTA_NAMES_PACKAGE_ID::domain::new $DOMAIN_NAME \
--assign domain \
--move-call $IOTA_NAMES_PACKAGE_ID::registry::lookup iota_names domain \
--assign name_record_option \
--move-call 0x1::option::borrow "<$IOTA_NAMES_PACKAGE_ID::name_record::NameRecord>" name_record_option \
--assign name_record \
--move-call $IOTA_NAMES_PACKAGE_ID::name_record::target_address name_record \
--assign target_address_option \
--move-call 0x1::option::borrow "<address>" target_address_option \
--assign target_address \
--dev-inspect

# resolve name (reverse lookup/reverse resolution)
ADDRESS=0x689dae2f77b048dcc08e14d73104ea14222b5be14cc31f34a16a1221f944c1e3
iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::iota_names::registry "<$IOTA_NAMES_PACKAGE_ID::registry::Registry>" @$IOTA_NAMES_OBJECT_ID \
--assign iota_names \
--move-call $IOTA_NAMES_PACKAGE_ID::registry::reverse_lookup iota_names @$ADDRESS \
--assign domain_option \
--move-call 0x1::option::borrow "<$IOTA_NAMES_PACKAGE_ID::domain::Domain>" domain_option \
--assign domain \
--move-call $IOTA_NAMES_PACKAGE_ID::domain::to_string domain \
--assign name \
--dev-inspect

# resolve name (reverse lookup/reverse resolution) and print as utf-8
ADDRESS=0x689dae2f77b048dcc08e14d73104ea14222b5be14cc31f34a16a1221f944c1e3
inspect_output=$(iota client ptb \
--move-call $IOTA_NAMES_PACKAGE_ID::iota_names::registry "<$IOTA_NAMES_PACKAGE_ID::registry::Registry>" @$IOTA_NAMES_OBJECT_ID \
--assign iota_names \
--move-call $IOTA_NAMES_PACKAGE_ID::registry::reverse_lookup iota_names @$ADDRESS \
--assign domain_option \
--move-call 0x1::option::borrow "<$IOTA_NAMES_PACKAGE_ID::domain::Domain>" domain_option \
--assign domain \
--move-call $IOTA_NAMES_PACKAGE_ID::domain::to_string domain \
--assign name \
--dev-inspect)
# Extract the last bytes from the inspect_output
bytes=($(echo "$inspect_output" | grep -o 'Bytes: \[.*\]' | tail -n 1 | sed -E 's/[^0-9,]//g' | tr ',' '\n'))
# Convert the byte values into a raw binary string
name=""
for byte in "${bytes[@]}"; do
  name+=$(printf '\\x%02x' $byte)
done
echo -e "$name"

# set all data
iota client ptb \
--make-move-vec "<std::string::String>" "['key1', 'key2']" \
--assign keys \
--make-move-vec "<std::string::String>" "['value1', 'value2']" \
--assign values \
--move-call 0x2::vec_map::from_keys_values "<std::string::String,std::string::String>" keys values \
--assign data_vec_map \
--move-call $IOTA_NAMES_PACKAGE_ID::domain::new '"thoralf.iota"' \
--assign domain \
--move-call iota::dynamic_field::borrow_mut @0x093738ab2ff173e45e93a59bf7cc1adbf6e16e17f414446459a42940cc5dcf86  \
--assign registry \
--move-call $IOTA_NAMES_PACKAGE_ID::registry::set_data registry domain data_vec_map \
--gas-budget 50000000

# update pricing config
iota client ptb \
  --make-move-vec "<u64>" "[3, 3]" \
  --assign range3_values \
  --move-call $IOTA_NAMES_PACKAGE_ID::pricing_config::new_range range3_values \
  --assign range3 \
  --make-move-vec "<u64>" "[4, 4]" \
  --assign range4_values \
  --move-call $IOTA_NAMES_PACKAGE_ID::pricing_config::new_range range4_values \
  --assign range4 \
  --make-move-vec "<u64>" "[5, 63]" \
  --assign range5_values \
  --move-call $IOTA_NAMES_PACKAGE_ID::pricing_config::new_range range5_values \
  --assign range5 \
  --make-move-vec "<$IOTA_NAMES_PACKAGE_ID::pricing_config::Range>" "[range3, range4, range5]" \
  --assign ranges \
  --make-move-vec "<u64>" "[1_000_000, 500_000, 100_000]" \
  --assign prices \
  --move-call $IOTA_NAMES_PACKAGE_ID::pricing_config::new ranges prices \
  --assign pricing_config \
  --move-call $IOTA_NAMES_PACKAGE_ID::iota_names::remove_config "<$IOTA_NAMES_PACKAGE_ID::pricing_config::PricingConfig>" @$ADMIN_CAP @$IOTA_NAMES_OBJECT_ID \
  --move-call $IOTA_NAMES_PACKAGE_ID::iota_names::add_config "<$IOTA_NAMES_PACKAGE_ID::pricing_config::PricingConfig>" @$ADMIN_CAP @$IOTA_NAMES_OBJECT_ID pricing_config \
  --dry-run

# packages init output
{
  "adminAddress": "0x8ef82376b4409969ebe3889af2d5cb3588b10426bf35152d47a0a18a91ef37d6",
  "adminCap": "0x3014281d985cf1e2f640884d905c6c81aeb5951d14482e701428d4e611404a68",
  "iotaNames": "0xbf3563622035af599057c46f4b871e0a9817c7bab759354532402be6d9538ba3",
  "packageId": "0xa1d2ed2008d31d358cfaf61a89aa7cfaa78ed183dbe683620258e98c59f48b13",
  "packageIdPricing": "0xa1d2ed2008d31d358cfaf61a89aa7cfaa78ed183dbe683620258e98c59f48b13",
  "paymentsPackageId": "0xb06b8075797480a9bb660c927b666ca0301cdffa622e7c6b9c583bd2b45c781a",
  "publisherId": "0x8ef82376b4409969ebe3889af2d5cb3588b10426bf35152d47a0a18a91ef37d6",
  "subNamesPackageId": "0xeaa8d89e19d6f346f7a515bb3cf63fd9b7b456e77a0073a13103bdfbdd8d1980",
  "tempSubdomainsProxyPackageId": "0x11e01b25113cf141676d2f0b97068adbd2c98dd15ce1f52bd21c595faf63ec55",
  "coins": {
    "IOTA": {
      "type": "0x0000000000000000000000000000000000000000000000000000000000000002::iota::IOTA",
      "metadataId": "0xf7ceb0424ca93f77858c74aebda8bcd5ffe0f32b82ebcc38afb3ba643d03a5f8"
    }
  },
  "registryTableId": "0xd5e98aa3e79cff0cd5146dc4d7dea863eaffcce06703e47473f88214c4746501"

